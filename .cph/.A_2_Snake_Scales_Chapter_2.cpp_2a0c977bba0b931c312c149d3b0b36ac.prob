{"name":"A2: Snake Scales (Chapter 2)","group":"Meta Coding Competitions - Meta Hacker Cup 2025 Round 1","url":"https://www.facebook.com/codingcompetitions/hacker-cup/2025/round-1/problems/A2?source=google","interactive":false,"memoryLimit":1024,"timeLimit":360000,"tests":[{"id":1760808162374,"input":"#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Edge {\n    int u, v;\n    long long cost;\n};\n\nbool compareEdges(const Edge& a, const Edge& b) {\n    return a.cost < b.cost;\n}\n\nstruct DSU {\n    vector<int> parent;\n    vector<int> sz;\n    int platform_count;\n    DSU(int n) {\n        parent.resize(n + 1);\n        iota(parent.begin(), parent.end(), 0);\n        sz.assign(n + 1, 1);\n        sz[0] = 0; // Ground doesn't count as a platform\n        platform_count = 0;\n    }\n\n    int find(int i) {\n        if (parent[i] == i)\n            return i;\n        return parent[i] = find(parent[i]);\n    }\n\n    void unite(int i, int j) {\n        int root_i = find(i);\n        int root_j = find(j);\n        if (root_i != root_j) {\n            if (sz[root_i] < sz[root_j])\n                swap(root_i, root_j);\n            parent[root_j] = root_i;\n            sz[root_i] += sz[root_j];\n            if (root_i == find(0)) {\n                 platform_count = sz[root_i];\n            } else if (root_j == find(0)) {\n                 platform_count = sz[root_j];\n            }\n        }\n    }\n};\n\nvoid solve(int case_num) {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    vector<Edge> edges;\n    for (int i = 0; i < n; ++i) {\n        cin >> a[i];\n        edges.push_back({0, i + 1, (long long)a[i]});\n        if (i > 0) {\n            edges.push_back({i, i + 1, (long long)abs(a[i] - a[i - 1])});\n        }\n    }\n\n    sort(edges.begin(), edges.end(), compareEdges);\n\n    DSU dsu(n);\n    long long ans = 0;\n\n    for (const auto& edge : edges) {\n        dsu.unite(edge.u, edge.v);\n        if (dsu.platform_count == n) {\n            ans = edge.cost;\n            break;\n        }\n    }\n    \n    cout << \"Case #\" << case_num << \": \" << ans << \"\\n\";\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    int t;\n    cin >> t;\n    for (int i = 1; i <= t; ++i) {\n        solve(i);\n    }\n    return 0;\n}","output":"Case #1: 3\nCase #2: 10\nCase #3: 4\nCase #4: 42\nCase #5: 42\nCase #6: 2\n"},{"id":1760808359899,"input":"","output":""}],"testType":"multiNumber","input":{"pattern":"snake_scales_chapter__.*input[.]txt","type":"regex"},"output":{"fileName":"snake_scales_chapter__output.txt","type":"file"},"languages":{"java":{"mainClass":"Main","taskClass":"A2SnakeScalesChapter2"}},"batch":{"id":"a3c7a677-29b0-45c9-a5b6-8852c4f216e0","size":1},"srcPath":"c:\\CompetitiveProgramming\\A_2_Snake_Scales_Chapter_2.cpp"}